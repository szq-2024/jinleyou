{"version":3,"file":"index.js","sources":["pages/index/index.vue","../Programming/HBuilderX.4.57.2025032507/HBuilderX/plugins/uniapp-cli-vite/uniPage:/cGFnZXMvaW5kZXgvaW5kZXgudnVl"],"sourcesContent":["<template>\r\n\t<view class=\"scenic-list\">\r\n\t    <!-- 景点列表 -->\r\n\t    <scroll-view \r\n\t\t\tscroll-y \r\n\t\t\tclass=\"scenic-container\"\r\n\t\t\t@scrolltolower=\"loadMore\"\r\n\t\t\t:refresher-enabled=\"true\"\r\n\t\t\t:refresher-triggered=\"isRefreshing\"\r\n\t\t\t@refresherrefresh=\"onRefresh\"\r\n\t    >\r\n\t    <view class=\"scenic-grid\">\r\n\t        <view \r\n\t\t\t\tv-for=\"(item, index) in scenicList\" \r\n\t\t\t\t:key=\"index\"\r\n\t\t\t\tclass=\"scenic-item\"\r\n\t\t\t\t@click=\"handleDetail(item)\"\r\n\t        >\r\n\t        <image class=\"cover\" :src=\"item.imageUrl\" mode=\"aspectFill\" />\r\n\t        <view class=\"info\">\r\n\t            <text class=\"name\">{{item.name}}</text>\r\n\t            <text class=\"desc\">{{item.description}}</text>\r\n\t        </view>\r\n\t    </view>\r\n\t</view>\r\n\t\r\n\t    <!-- 加载更多 -->\r\n\t    <view v-if=\"hasMore\" class=\"loading-more\">\r\n\t        <text>加载中...</text>\r\n\t    </view>\r\n\t    <view v-else class=\"no-more\">\r\n\t        <text>没有更多了</text>\r\n\t    </view>\r\n\t    </scroll-view>\r\n\t</view>\r\n</template>\r\n\r\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport { http, ENV_CONFIG } from '@/api/http';\n// 状态定义\nconst scenicList = ref([]);\nconst loading = ref(false);\nconst hasMore = ref(true);         // 新增分页控制\nconst isRefreshing = ref(false);   // 新增下拉刷新状态\nconst page = ref(1);               // 新增页码控制\nconst pageSize = 10;               // 每页数量\nconst handleDetail = (item) => {\n  try {\n    uni.navigateTo({\n      url: `/pages/scenic/scenic?id=${item.id}`\n    });\n  } catch (error) {\n    console.error('导航失败:', error);\n    uni.showToast({\n      title: '打开详情失败',\n      icon: 'none'\n    });\n  }\n};\n// 获取景点列表（带分页参数）\n// 在script部分修改fetch逻辑\nconst fetchScenicList = async (pageNum = 1) => {\n  if (loading.value) return;\n  loading.value = true;\n  \n  try {\n    // 使用封装好的http.get方法，参数通过params传递\n    const response = await http.get('/api/scenic-spots', {\n      params: { // 正确传递GET参数\n        page: pageNum,\n        pageSize: pageSize\n      }\n    });\n\n    // 校验响应数据结构\n    if (!response || !response.data || !Array.isArray(response.data.data)) {\n      console.error('无效的数据结构:', response);\n      throw new Error('服务器返回数据格式异常');\n    }\n\n    const newData = response.data.data.map(item => ({\n      ...item,\n      imageUrl: item.imageUrl ? ENV_CONFIG[process.env.NODE_ENV] + item.imageUrl : ''\n    }));\n\n    // 更新列表和分页状态\n    scenicList.value = pageNum === 1 \r\n      ? newData \r\n      : [...scenicList.value, ...newData];\n    \n    hasMore.value = (pageNum * pageSize) < response.data.total;\n    if (hasMore.value) page.value = pageNum;\n\n  } catch (error) {\n    uni.showToast({ \n      title: error.message || '加载失败',\n      icon: 'none',\n      duration: 2000\n    });\n  } finally {\n    loading.value = false;\n    isRefreshing.value = false;\n  }\n};\n\n// 加载更多\nconst loadMore = () => {\n  if (!hasMore.value || loading.value) return;\n  page.value += 1; // 先递增页码\n  fetchScenicList(page.value);\n};\n\n// 下拉刷新\nconst onRefresh = () => {\n  isRefreshing.value = true;\n  fetchScenicList(1); // 刷新时重置到第一页\n};\n\n// 初始化加载\nonMounted(() => fetchScenicList());\n</script>\r\n\n\n<style lang=\"scss\">\n.scenic-list {\n  min-height: 100vh;\n  background-color: #f5f5f5;\n  \n  .scenic-container {\n    height: 100vh;\n  }\n  \n  .scenic-grid {\n    padding: 32rpx;\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    gap: 32rpx;\n  }\n  \n  .scenic-item {\n    background-color: #fff;\n    border-radius: 12rpx;\n    overflow: hidden;\n    \n    .cover {\n      width: 100%;\n      height: 320rpx;\n      background-color: #f5f5f5;\n    }\n    \n    .info {\n      padding: 16rpx;\n      \n      .name {\n        font-size: 28rpx;\n        color: #333;\n        font-weight: 500;\n      }\n      \n      .desc {\n        font-size: 24rpx;\n        color: #666;\n        margin-top: 8rpx;\n        display: -webkit-box;\n        -webkit-box-orient: vertical;\n        -webkit-line-clamp: 2;\n        overflow: hidden;\n      }\n    }\n  }\n  \n  .loading-more, .no-more {\n    text-align: center;\n    padding: 24rpx 0;\n    font-size: 24rpx;\n    color: #999;\n  }\n}\n</style> \n","import MiniProgramPage from 'C:/Users/SZQ/Desktop/jinleyou_uniapp/pages/index/index.vue'\nwx.createPage(MiniProgramPage)"],"names":["ref","uni","http","ENV_CONFIG","onMounted","MiniProgramPage"],"mappings":";;;AA8CA,MAAM,WAAW;;;;AALX,UAAA,aAAaA,kBAAI,CAAA,CAAE;AACnB,UAAA,UAAUA,kBAAI,KAAK;AACnB,UAAA,UAAUA,kBAAI,IAAI;AAClB,UAAA,eAAeA,kBAAI,KAAK;AACxB,UAAA,OAAOA,kBAAI,CAAC;AAEZ,UAAA,eAAe,CAAC,SAAS;AACzB,UAAA;AACFC,sBAAAA,MAAI,WAAW;AAAA,UACb,KAAK,2BAA2B,KAAK,EAAE;AAAA,QAAA,CACxC;AAAA,eACM,OAAO;AACdA,sBAAA,oDAAc,SAAS,KAAK;AAC5BA,sBAAAA,MAAI,UAAU;AAAA,UACZ,OAAO;AAAA,UACP,MAAM;AAAA,QAAA,CACP;AAAA,MACH;AAAA,IAAA;AAII,UAAA,kBAAkB,OAAO,UAAU,MAAM;AAC7C,UAAI,QAAQ;AAAO;AACnB,cAAQ,QAAQ;AAEZ,UAAA;AAEF,cAAM,WAAW,MAAMC,cAAK,IAAI,qBAAqB;AAAA,UACnD,QAAQ;AAAA;AAAA,YACN,MAAM;AAAA,YACN;AAAA,UACF;AAAA,QAAA,CACD;AAGG,YAAA,CAAC,YAAY,CAAC,SAAS,QAAQ,CAAC,MAAM,QAAQ,SAAS,KAAK,IAAI,GAAG;AACrED,wBAAA,MAAc,MAAA,SAAA,+BAAA,YAAY,QAAQ;AAC5B,gBAAA,IAAI,MAAM,aAAa;AAAA,QAC/B;AAEA,cAAM,UAAU,SAAS,KAAK,KAAK,IAAI,CAAS,UAAA;AAAA,UAC9C,GAAG;AAAA,UACH,UAAU,KAAK,WAAWE,SAAAA,WAAW,aAAoB,IAAI,KAAK,WAAW;AAAA,QAC7E,EAAA;AAGS,mBAAA,QAAQ,YAAY,IAC3B,UACA,CAAC,GAAG,WAAW,OAAO,GAAG,OAAO;AAEpC,gBAAQ,QAAS,UAAU,WAAY,SAAS,KAAK;AACrD,YAAI,QAAQ;AAAO,eAAK,QAAQ;AAAA,eAEzB,OAAO;AACdF,sBAAAA,MAAI,UAAU;AAAA,UACZ,OAAO,MAAM,WAAW;AAAA,UACxB,MAAM;AAAA,UACN,UAAU;AAAA,QAAA,CACX;AAAA,MAAA,UACD;AACA,gBAAQ,QAAQ;AAChB,qBAAa,QAAQ;AAAA,MACvB;AAAA,IAAA;AAIF,UAAM,WAAW,MAAM;AACjB,UAAA,CAAC,QAAQ,SAAS,QAAQ;AAAO;AACrC,WAAK,SAAS;AACd,sBAAgB,KAAK,KAAK;AAAA,IAAA;AAI5B,UAAM,YAAY,MAAM;AACtB,mBAAa,QAAQ;AACrB,sBAAgB,CAAC;AAAA,IAAA;AAITG,4BAAA,MAAM,iBAAiB;;;;;;;;;;;;;;;;;;;;;;ACvHjC,GAAG,WAAWC,SAAe;"}