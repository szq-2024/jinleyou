{"version":3,"names":["baseUrl","ENV_CONFIG","development","production","GLOBAL_CONFIG","timeout","retryCount","http","get","url","options","arguments","length","undefined","enhancedHttp","_objectSpread2","method","post","data","put","delete","_x","_enhancedHttp","apply","_asyncToGenerator2","_regeneratorRuntime2","mark","_callee","mergedOptions","_yield$requestInterce","headers","_yield$requestInterce2","shouldAuth","finalHeaders","validToken","newToken","response","_args","wrap","_callee$","_context","prev","next","requestInterceptor","sent","api_auth","checkTokenExpiration","t0","common_vendor","index","__f__","Authorization","concat","timestamp","Date","toISOString","requestWithRetry","header","status","statusCode","abrupt","responseInterceptor","t1","errorType","constructor","name","message","stack","errorHandler","stop","_x2","_requestWithRetry","_callee2","params","retry","i","res","_res","error","successRes","_args2","_callee2$","_context2","request","Array","isArray","_slicedToArray2","Object","assign","requestUrl","Error","_requestInterceptor","_callee3","_callee3$","_context3","_typeof2","navigateTo","showToast","title","icon","duration"],"sources":["http.js"],"sourcesContent":["//api/http.js\r\nimport { checkTokenExpiration } from './auth';\r\nexport const baseUrl = ENV_CONFIG[process.env.NODE_ENV];\r\n// 环境配置\nconst ENV_CONFIG = {\n\tdevelopment: 'http://localhost:3000/api',\n\tproduction: 'https://apifoxmock.com/m1/4728220-0-default/api'\n}\n\n// 全局配置\nconst GLOBAL_CONFIG = {\n\ttimeout: 10000, // 10秒超时\n\tretryCount: 1, // 失败重试次数\n}\n\n/**\n * 增强型请求封装\n * @param {string} url - 请求地址\n * @param {object} options - 请求配置\n * @returns {Promise} \n */\r\n// 修改默认导出为命名导出\nexport const http = {\n  get: (url, options = {}) => enhancedHttp(url, { ...options, method: 'GET' }),\n  post: (url, data, options = {}) => enhancedHttp(url, { ...options, method: 'POST', data }),\n  put: (url, data, options = {}) => enhancedHttp(url, { ...options, method: 'PUT', data }),\n  delete: (url, options = {}) => enhancedHttp(url, { ...options, method: 'DELETE' })\n}\r\n\r\n\nexport async function enhancedHttp(url, options = {}) {\n  // 合并配置\n\tconst mergedOptions = {\n\t\tmethod: 'GET',\n\t\tdata: {},\n\t\theaders: {},\n\t\t...options\n\t}\n\n\t// 请求拦截器\n\tconst { headers, shouldAuth = true } = await requestInterceptor()\n  \n\t// 构造请求头\n\tconst finalHeaders = {\n\t\t'Content-Type': 'application/json',\r\n\t\t'Access-Control-Allow-Origin': '*',\n\t\t...headers,\n\t\t...mergedOptions.headers\n\t}\n\n\t// Token处理\n\tif (shouldAuth) {\r\n\t\tlet validToken = checkTokenExpiration()\n\t\t\r\n\t\t  // 自动刷新机制\r\n\t\tif (!validToken && shouldAuth) {\r\n\t\t    try {\r\n\t\t\t\tconst newToken = await checkTokenExpiration()\r\n\t\t\t\tvalidToken = newToken\r\n\t\t    } catch (e) {\r\n\t\t\t\tconsole.error('Token刷新失败:', e)\r\n\t\t    }\r\n\t\t}\n\t\tif (validToken) {\n\t\t\tfinalHeaders.Authorization = `Bearer ${validToken}`\n\t\t}\n\t}\n\n\t// 发起请求\n\ttry {\r\n\t\t // 🔴 新增请求开始日志（步骤3）\r\n\t\t    console.debug('[HTTP] 请求开始', {\r\n\t\t      timestamp: new Date().toISOString(),\r\n\t\t      url: ENV_CONFIG[process.env.NODE_ENV] + url,\r\n\t\t      method: mergedOptions.method,\r\n\t\t      data: mergedOptions.data,\r\n\t\t      headers: finalHeaders\r\n\t\t    });\r\n\t\t\r\n\t\t    const response = await requestWithRetry({\r\n\t\t      url: ENV_CONFIG[process.env.NODE_ENV] + url,\r\n\t\t      data: mergedOptions.data,\r\n\t\t      method: mergedOptions.method,\r\n\t\t      header: finalHeaders,\r\n\t\t      timeout: GLOBAL_CONFIG.timeout\r\n\t\t    });\r\n\t\t\r\n\t\t    // 🔴 新增原始响应日志（步骤3）\r\n\t\t    console.debug('[HTTP] 原始响应', {\r\n\t\t      status: response.statusCode,\r\n\t\t      headers: response.header,\r\n\t\t      data: response.data\r\n\t\t    });\r\n\t\t\r\n\t\t    // 响应拦截器\r\n\t\t    return responseInterceptor(response);\r\n\t\t  } catch (error) {\r\n\t\t    // 🔴 新增错误详情日志（步骤3）\r\n\t\t    console.error('[HTTP] 请求失败', {\r\n\t\t      errorType: error.constructor.name,\r\n\t\t      message: error.message,\r\n\t\t      stack: error.stack,\r\n\t\t      retryCount: GLOBAL_CONFIG.retryCount,\r\n\t\t      url: ENV_CONFIG[process.env.NODE_ENV] + url\r\n\t\t    });\r\n\t\t    \r\n\t\t    errorHandler(error);\r\n\t\t    throw error;\r\n\t\t  }\n}\nconst platformAdapter = {\n  processResponse(res) {\n    // 处理微信小程序返回值（返回数组）\n    if (Array.isArray(res)) {\n      const [error, successRes] = res;\n      return error ? { error } : { response: successRes };\n    }\n    // 处理H5返回值（返回Promise）\n    return { response: res };\n  }\n};\n/**\n * 带重试机制的请求\n */\n// 修正requestWithRetry函数\n// http.js 修改后\nasync function requestWithRetry(params, retry = GLOBAL_CONFIG.retryCount) {\n  for (let i = 0; i <= retry; i++) {\n    try {\n      const res = await uni.request(params);\n      \n      // 处理微信小程序的数组响应\n      if (Array.isArray(res)) {\n        const [error, successRes] = res;\n        if (error) throw error;\n        return {\n          statusCode: successRes.statusCode,\n          data: successRes.data,\n          headers: successRes.header || {}\n        };\n      }\n      \n      // 处理其他平台的响应\n      return {\n        statusCode: res.statusCode || res.status,\n        data: res.data,\n        headers: res.header || res.headers || {}\n      };\n    } catch (error) {\n      if (i === retry) {\n        throw Object.assign(error, { \n          requestUrl: params.url,\n          retryCount: i + 1 \n        });\n      }\n    }\n  }\n  throw new Error(`请求失败: 超过最大重试次数 (${retry})`);\n}\n\n/**\n * 请求拦截器（可扩展）\n */\nasync function requestInterceptor() {\n  // 可以在这里添加全局请求前逻辑\n\treturn {\n\t\theaders: {},\n\t\tshouldAuth: true\n\t}\n}\n\n/**\n * 响应拦截器\n */\nfunction responseInterceptor(response) {\n  // 1. 基础对象校验\n  if (!response || typeof response !== 'object') {\n    throw new Error('响应对象格式错误: 非对象类型');\n  }\n\n  // 2. 关键字段校验\n  const { statusCode, data } = response;\n  if (typeof statusCode === 'undefined') {\n    throw new Error('响应缺少状态码 (statusCode)');\n  }\n  if (typeof data === 'undefined') {\n    throw new Error('响应缺少数据字段 (data)');\n  }\n\n  // 3. 状态码处理\n  switch (true) {\n    case statusCode === 401:\n      uni.navigateTo({ url: '/pages/login' });\n      throw new Error('登录状态已过期');\n    case statusCode >= 500:\n      throw new Error(`服务器错误 (${statusCode})`);\n    case statusCode >= 400:\n      throw new Error(`客户端错误 (${statusCode})`);\n    case statusCode === 200:\n      return data; // 正常返回数据\n    default:\n      throw new Error(`未知状态码: ${statusCode}`);\n  }\n}\n\n/**\n * 统一错误处理\n */\nfunction errorHandler(error) {\n\tconsole.error('请求错误:', error)\n\tuni.showToast({\n\t\ttitle: error.message || '网络请求失败',\n\t\ticon: 'none',\n\t\tduration: 2000\n\t})\n}"],"mappings":"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","ignoreList":[]}